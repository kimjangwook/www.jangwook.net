---
import { getEntry } from 'astro:content';
import { Image } from 'astro:assets';
import { readFileSync } from 'fs';
import { join } from 'path';

interface Props {
  currentSlug: string;
}

const { currentSlug } = Astro.props;

// Language-specific headings
const headings = {
  ko: '관련 글',
  ja: '関連記事',
  en: 'Related Articles'
};

const matchLabels = {
  ko: '유사도',
  ja: '類似度',
  en: 'Match'
};

// Extract language from slug (format: "ko/post-name")
const language = currentSlug.split('/')[0] as 'ko' | 'ja' | 'en';
const heading = headings[language] || headings.en;
const matchLabel = matchLabels[language] || matchLabels.en;

// Extract base slug (remove language prefix) for recommendations lookup
const baseSlug = currentSlug.split('/').slice(1).join('/');

// Try to load recommendations
let postRecommendations = null;
let relatedPosts = [];

try {
  const recommendationsPath = join(process.cwd(), 'recommendations.json');
  const recommendationsData = JSON.parse(readFileSync(recommendationsPath, 'utf-8'));

  // Look up recommendations using base slug (without language prefix)
  postRecommendations = recommendationsData.recommendations?.[baseSlug];

  if (postRecommendations && postRecommendations.related) {
    // Fetch full post data for each recommendation (top 3 only)
    relatedPosts = await Promise.all(
      postRecommendations.related.slice(0, 3).map(async (rec: any) => {
        try {
          // Construct full content ID with language prefix
          const fullPostId = `${language}/${rec.slug}`;
          const post = await getEntry('blog', fullPostId);

          if (!post) {
            console.warn(`[RelatedPosts] Post not found: ${fullPostId}`);
            return null;
          }

          // Build URL: /<lang>/blog/<lang>/<slug>
          const url = `/${language}/blog/${language}/${rec.slug}`;

          // Handle reason: can be string (old format) or object (new multilingual format)
          const reason = typeof rec.reason === 'object'
            ? rec.reason[language] || rec.reason.ko || rec.reason.en
            : rec.reason;

          return {
            ...rec,
            title: post.data.title,
            description: post.data.description,
            heroImage: post.data.heroImage,
            url,
            reason
          };
        } catch (error) {
          console.error(`[RelatedPosts] Error fetching post ${rec.slug}:`, error);
          return null;
        }
      })
    );

    // Filter out null entries
    relatedPosts = relatedPosts.filter(post => post !== null);
  }
} catch (error) {
  // Recommendations file doesn't exist or has errors
  console.warn('[RelatedPosts] Could not load recommendations:', error instanceof Error ? error.message : error);
}

// Don't render if no recommendations
if (!relatedPosts || relatedPosts.length === 0) {
  return null;
}
---

<section class="related-posts">
  <h3 class="section-title">{heading}</h3>
  <ul class="recommendations-list">
    {relatedPosts.map((post) => (
      <li class="recommendation-item">
        <a
          href={post.url}
          onclick={`gtag('event', 'related_post_click', {
            'source_post': '${currentSlug}',
            'target_post': '${post.slug}',
            'similarity_score': ${post.score},
            'recommendation_type': '${post.type}'
          })`}
        >
          <div class="item-content">
            <h4 class="item-title">{post.title}</h4>
            {post.reason && (
              <p class="item-reason">{post.reason}</p>
            )}
          </div>
          {post.heroImage && (
            <div class="item-image">
              <Image
                src={post.heroImage}
                alt={post.title}
                width={120}
                height={80}
                loading="lazy"
              />
            </div>
          )}
        </a>
      </li>
    ))}
  </ul>
</section>

<style>
  .related-posts {
    margin: 3.5rem 0 2.5rem;
    padding: 2rem;
    background: white;
    border-radius: 12px;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.06);
    border: 1px solid rgba(var(--gray-light), 0.2);
  }

  .section-title {
    font-size: 1.5rem;
    font-weight: 700;
    margin: 0 0 1.5rem 0;
    color: rgb(var(--gray-dark));
    padding-bottom: 1rem;
    border-bottom: 1px solid rgba(var(--gray-light), 0.3);
  }

  .recommendations-list {
    list-style: none;
    padding: 0;
    margin: 0;
  }

  .recommendation-item {
    border-bottom: 1px solid rgba(var(--gray-light), 0.2);
  }

  .recommendation-item:last-child {
    border-bottom: none;
  }

  .recommendation-item a {
    display: flex;
    align-items: center;
    gap: 1.25rem;
    padding: 1.25rem 0;
    text-decoration: none;
    color: inherit;
    transition: all 0.2s ease;
  }

  .recommendation-item:hover a {
    opacity: 0.8;
  }

  .item-content {
    flex: 1;
    min-width: 0;
  }

  .item-title {
    margin: 0 0 0.5rem 0;
    font-size: 1.0625rem;
    font-weight: 600;
    color: rgb(var(--gray-dark));
    line-height: 1.4;
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  .recommendation-item:hover .item-title {
    color: rgb(var(--accent));
  }

  .item-reason {
    margin: 0;
    font-size: 0.8125rem;
    color: rgb(var(--gray));
    line-height: 1.4;
    display: -webkit-box;
    -webkit-line-clamp: 1;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  .item-image {
    flex-shrink: 0;
    width: 120px;
    height: 80px;
    border-radius: 6px;
    overflow: hidden;
    background: rgba(var(--gray-light), 0.1);
  }

  .item-image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  /* Dark mode support */
  @media (prefers-color-scheme: dark) {
    .related-posts {
      background: rgba(255, 255, 255, 0.02);
      border-color: rgba(var(--gray-light), 0.1);
    }

    .section-title {
      color: rgba(255, 255, 255, 0.95);
      border-bottom-color: rgba(var(--gray-light), 0.15);
    }

    .recommendation-item {
      border-bottom-color: rgba(var(--gray-light), 0.1);
    }

    .item-title {
      color: rgba(255, 255, 255, 0.9);
    }

    .recommendation-item:hover .item-title {
      color: rgb(var(--accent-light));
    }
  }

  /* Responsive design */
  @media (max-width: 640px) {
    .related-posts {
      margin: 2.5rem 0 2rem;
      padding: 1.5rem;
    }

    .section-title {
      font-size: 1.25rem;
      margin-bottom: 1.25rem;
    }

    .recommendation-item a {
      gap: 1rem;
      padding: 1rem 0;
    }

    .item-title {
      font-size: 0.9375rem;
      margin-bottom: 0.375rem;
    }

    .item-reason {
      font-size: 0.75rem;
    }

    .item-image {
      width: 90px;
      height: 60px;
    }
  }

  /* Print styles */
  @media print {
    .related-posts {
      display: none;
    }
  }
</style>
