---
import BaseHead from '../components/BaseHead.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import { SITE_TITLE, SITE_DESCRIPTION } from '../consts';

// This will be populated by the improvement-tracker agent
const improvements = [
  // Example structure (to be populated):
  // {
  //   date: '2025-10-18',
  //   title: 'Mobile UX Optimization',
  //   category: 'UX',
  //   before: { metric: 'Mobile Bounce Rate', value: '68%' },
  //   after: { metric: 'Mobile Bounce Rate', value: '47%' },
  //   impact: '-31%',
  //   impactType: 'positive', // or 'negative'
  //   effort: 'Medium',
  //   roi: 'Excellent',
  //   sourceReport: '/blog/ko/weekly-analytics-2025-10-12',
  //   description: 'Optimized mobile experience for top 3 posts',
  //   lessons: ['Image optimization had biggest impact', 'Real device testing crucial']
  // }
];

const categories = {
  'Traffic': improvements.filter(i => i.category === 'Traffic'),
  'Content': improvements.filter(i => i.category === 'Content'),
  'SEO': improvements.filter(i => i.category === 'SEO'),
  'UX': improvements.filter(i => i.category === 'UX'),
  'Technical': improvements.filter(i => i.category === 'Technical'),
};

const metrics = {
  totalImprovements: improvements.length,
  avgImpact: improvements.length > 0
    ? (improvements.reduce((sum, i) => sum + parseFloat(i.impact), 0) / improvements.length).toFixed(1)
    : 0,
  topCategory: Object.entries(categories).sort((a, b) => b[1].length - a[1].length)[0]?.[0] || 'N/A'
};
---

<!doctype html>
<html lang="ko">
  <head>
    <BaseHead title={`점진적 사이트 개선 히스토리 - ${SITE_TITLE}`} description="데이터 기반의 지속적인 사이트 개선 과정과 성과를 투명하게 공유합니다" />
    <style>
      .improvement-grid {
        display: grid;
        gap: 2rem;
        margin-top: 2rem;
      }

      .improvement-card {
        border: 1px solid var(--gray-200);
        border-radius: 8px;
        padding: 1.5rem;
        background: var(--gray-50);
        transition: transform 0.2s, box-shadow 0.2s;
      }

      .improvement-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
      }

      .card-header {
        display: flex;
        justify-content: space-between;
        align-items: start;
        margin-bottom: 1rem;
      }

      .card-title {
        font-size: 1.25rem;
        font-weight: 600;
        margin: 0;
      }

      .category-badge {
        padding: 0.25rem 0.75rem;
        border-radius: 12px;
        font-size: 0.875rem;
        font-weight: 500;
      }

      .category-traffic { background: #e0f2fe; color: #0369a1; }
      .category-content { background: #fce7f3; color: #9f1239; }
      .category-seo { background: #dcfce7; color: #15803d; }
      .category-ux { background: #fef3c7; color: #a16207; }
      .category-technical { background: #e0e7ff; color: #4338ca; }

      .metrics-row {
        display: flex;
        gap: 1rem;
        margin: 1rem 0;
        flex-wrap: wrap;
      }

      .metric {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        padding: 0.5rem 1rem;
        background: white;
        border-radius: 6px;
        font-size: 0.875rem;
      }

      .metric-label {
        color: var(--gray-600);
      }

      .metric-value {
        font-weight: 600;
      }

      .impact-positive {
        color: #15803d;
      }

      .impact-negative {
        color: #dc2626;
      }

      .timeline {
        position: relative;
        padding-left: 2rem;
      }

      .timeline::before {
        content: '';
        position: absolute;
        left: 0.5rem;
        top: 0;
        bottom: 0;
        width: 2px;
        background: var(--gray-300);
      }

      .timeline-item {
        position: relative;
        margin-bottom: 2rem;
      }

      .timeline-item::before {
        content: '';
        position: absolute;
        left: -1.5rem;
        top: 0.5rem;
        width: 12px;
        height: 12px;
        border-radius: 50%;
        background: var(--accent);
        border: 2px solid white;
      }

      .before-after {
        display: grid;
        grid-template-columns: 1fr auto 1fr;
        gap: 1rem;
        align-items: center;
        margin: 1rem 0;
        padding: 1rem;
        background: white;
        border-radius: 6px;
      }

      .before, .after {
        text-align: center;
      }

      .arrow {
        font-size: 1.5rem;
        color: var(--gray-400);
      }

      .value {
        font-size: 1.5rem;
        font-weight: 700;
      }

      .lessons {
        margin-top: 1rem;
        padding: 1rem;
        background: #fef9c3;
        border-left: 3px solid #facc15;
        border-radius: 4px;
      }

      .lessons-title {
        font-weight: 600;
        margin-bottom: 0.5rem;
        color: #a16207;
      }

      .lessons ul {
        margin: 0;
        padding-left: 1.5rem;
      }

      .empty-state {
        text-align: center;
        padding: 4rem 2rem;
        color: var(--gray-500);
      }

      .empty-state-icon {
        font-size: 4rem;
        margin-bottom: 1rem;
      }

      .stats-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 1.5rem;
        margin: 2rem 0;
      }

      .stat-card {
        padding: 1.5rem;
        background: white;
        border-radius: 8px;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
      }

      .stat-value {
        font-size: 2rem;
        font-weight: 700;
        color: var(--accent);
      }

      .stat-label {
        margin-top: 0.5rem;
        color: var(--gray-600);
        font-size: 0.875rem;
      }

      .filter-tabs {
        display: flex;
        gap: 0.5rem;
        margin: 2rem 0;
        border-bottom: 2px solid var(--gray-200);
        padding-bottom: 0;
      }

      .filter-tab {
        padding: 0.75rem 1.5rem;
        background: none;
        border: none;
        cursor: pointer;
        color: var(--gray-600);
        font-weight: 500;
        border-bottom: 2px solid transparent;
        margin-bottom: -2px;
        transition: all 0.2s;
      }

      .filter-tab:hover {
        color: var(--accent);
      }

      .filter-tab.active {
        color: var(--accent);
        border-bottom-color: var(--accent);
      }
    </style>
  </head>
  <body>
    <Header />
    <main>
      <section>
        <div class="hero">
          <h1>🚀 점진적 사이트 개선 히스토리</h1>
          <p>데이터 기반의 지속적인 개선 과정과 성과를 투명하게 공유합니다</p>
        </div>

        <!-- Summary Stats -->
        <div class="stats-grid">
          <div class="stat-card">
            <div class="stat-value">{metrics.totalImprovements}</div>
            <div class="stat-label">총 개선 건수</div>
          </div>
          <div class="stat-card">
            <div class="stat-value">{metrics.avgImpact}%</div>
            <div class="stat-label">평균 개선 효과</div>
          </div>
          <div class="stat-card">
            <div class="stat-value">{metrics.topCategory}</div>
            <div class="stat-label">최다 개선 카테고리</div>
          </div>
        </div>

        {improvements.length === 0 ? (
          <div class="empty-state">
            <div class="empty-state-icon">📊</div>
            <h2>아직 개선 사항이 기록되지 않았습니다</h2>
            <p>첫 번째 분석 리포트를 생성하고 개선 작업을 시작해보세요!</p>
            <p style="margin-top: 2rem;">
              <strong>다음 단계:</strong><br>
              1. analytics-reporter 에이전트로 첫 리포트 생성<br>
              2. improvement-tracker 에이전트로 액션 플랜을 TODO로 변환<br>
              3. 개선 작업 완료 후 결과 기록
            </p>
          </div>
        ) : (
          <>
            <!-- Category Filters (when there are improvements) -->
            <div class="filter-tabs">
              <button class="filter-tab active" data-category="all">전체</button>
              <button class="filter-tab" data-category="Traffic">트래픽</button>
              <button class="filter-tab" data-category="Content">콘텐츠</button>
              <button class="filter-tab" data-category="SEO">SEO</button>
              <button class="filter-tab" data-category="UX">UX</button>
              <button class="filter-tab" data-category="Technical">기술</button>
            </div>

            <!-- Timeline View -->
            <div class="timeline">
              {improvements.map((item) => (
                <div class="timeline-item" data-category={item.category}>
                  <div class="improvement-card">
                    <div class="card-header">
                      <h3 class="card-title">{item.title}</h3>
                      <span class={`category-badge category-${item.category.toLowerCase()}`}>
                        {item.category}
                      </span>
                    </div>

                    <p>{item.description}</p>

                    <div class="before-after">
                      <div class="before">
                        <div class="metric-label">개선 전</div>
                        <div class="value">{item.before.value}</div>
                        <div class="metric-label">{item.before.metric}</div>
                      </div>
                      <div class="arrow">→</div>
                      <div class="after">
                        <div class="metric-label">개선 후</div>
                        <div class={`value ${item.impactType === 'positive' ? 'impact-positive' : 'impact-negative'}`}>
                          {item.after.value}
                        </div>
                        <div class="metric-label">{item.after.metric}</div>
                      </div>
                    </div>

                    <div class="metrics-row">
                      <div class="metric">
                        <span class="metric-label">효과:</span>
                        <span class={`metric-value ${item.impactType === 'positive' ? 'impact-positive' : 'impact-negative'}`}>
                          {item.impact}
                        </span>
                      </div>
                      <div class="metric">
                        <span class="metric-label">투입:</span>
                        <span class="metric-value">{item.effort}</span>
                      </div>
                      <div class="metric">
                        <span class="metric-label">ROI:</span>
                        <span class="metric-value">{item.roi}</span>
                      </div>
                      <div class="metric">
                        <span class="metric-label">날짜:</span>
                        <span class="metric-value">{item.date}</span>
                      </div>
                    </div>

                    {item.lessons && item.lessons.length > 0 && (
                      <div class="lessons">
                        <div class="lessons-title">💡 배운 점</div>
                        <ul>
                          {item.lessons.map((lesson) => (
                            <li>{lesson}</li>
                          ))}
                        </ul>
                      </div>
                    )}

                    {item.sourceReport && (
                      <div style="margin-top: 1rem;">
                        <a href={item.sourceReport} style="color: var(--accent); text-decoration: none;">
                          📄 출처 리포트 보기 →
                        </a>
                      </div>
                    )}
                  </div>
                </div>
              ))}
            </div>
          </>
        )}

        <!-- Data Sources & Notes -->
        <div style="margin-top: 4rem; padding: 2rem; background: var(--gray-50); border-radius: 8px;">
          <h3>📝 데이터 출처 및 관리</h3>
          <ul>
            <li><strong>분석 도구:</strong> Google Analytics 4 (Property ID: 395101361)</li>
            <li><strong>리포트:</strong> <a href="/blog">/blog</a> 페이지의 분석 리포트</li>
            <li><strong>TODO 관리:</strong> <code>/improvement-tracking/</code> 디렉토리</li>
            <li><strong>자동 업데이트:</strong> improvement-tracker 에이전트가 완료된 개선사항을 자동으로 이 페이지에 반영</li>
          </ul>
          <p style="margin-top: 1rem; color: var(--gray-600);">
            이 페이지는 블로그의 지속적인 개선 과정을 투명하게 공유하기 위해 만들어졌습니다.
            모든 개선사항은 데이터에 기반하며, 실제 측정된 결과를 기록합니다.
          </p>
        </div>
      </section>
    </main>
    <Footer />

    <script>
      // Category filtering
      const filterTabs = document.querySelectorAll('.filter-tab');
      const timelineItems = document.querySelectorAll('.timeline-item');

      filterTabs.forEach(tab => {
        tab.addEventListener('click', () => {
          const category = tab.dataset.category;

          // Update active tab
          filterTabs.forEach(t => t.classList.remove('active'));
          tab.classList.add('active');

          // Filter items
          timelineItems.forEach(item => {
            if (category === 'all' || item.dataset.category === category) {
              item.style.display = 'block';
            } else {
              item.style.display = 'none';
            }
          });
        });
      });
    </script>
  </body>
</html>
